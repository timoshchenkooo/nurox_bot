import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.utils.chat_action import ChatActionMiddleware
from aiogram.utils import executor

from config import BOT_TOKEN, API_URL

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø Nurox-–±–æ—Ç ü§ñ\n\n–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é, –ø–æ—Å—Ç –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.")

@dp.message_handler()
async def handle_message(message: types.Message):
    prompt = message.text.strip()

 # üü° –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(message.chat.id, action=types.ChatActions.TYPING)

    try:
        response = requests.post(API_URL, json={"prompt": prompt})
        if response.status_code == 200:
            result = response.json().get("response", "ü§î –ù–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç.")
            await message.reply(result, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞.")
    except Exception as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å API.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
