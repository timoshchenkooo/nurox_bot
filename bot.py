import logging
import requests
import asyncio  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DP)
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware

from config import BOT_TOKEN, API_URL  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ config.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º logger

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher() #  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
dp.middleware.setup(LoggingMiddleware())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    try:
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø Nurox-–±–æ—Ç ü§ñ\n\n–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è —Ç–µ–±—è –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é, –ø–æ—Å—Ç –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_message(message: types.Message):
    try:
        prompt = message.text.strip()

        # üü° –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await bot.send_chat_action(message.chat.id, action=types.ChatActions.TYPING)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        response = requests.post(API_URL, json={"prompt": prompt})

        if response.status_code == 200:
            result = response.json().get("response", "ü§î –ù–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç.")
            await message.reply(result, parse_mode=ParseMode.MARKDOWN)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseMode.MARKDOWN
        else:
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {response.status_code} - {response.text}")

    except requests.exceptions.RequestException as e:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
    except Exception as e:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (async)
async def main():
    try:
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
